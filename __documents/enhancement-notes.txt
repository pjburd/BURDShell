

Future enhancements
===================


Module system (WIP)
===================
Create a module library contain prompt handling for each type e.g. 'svn' will have a different set of details.
Give ability to create many types of commands

BURDShell.php will load any modules found within BURDShell/modules/
	
	
	// Load modules
	foreach module found
		read functions found
		register each as a known command
		if command already exists skip and report issue to user as [WARNING] Conflict module function found in [CONFLICT_MODULE] 
	
	// Sample module class		
	BURDShell_module_svn {
		
		function __construct()
		{
		..
		// Load config
		}
		
		function svn_help() {
		...
		}
	
		function svn_create() {
		
			.. prompt site name question ... Save nto internal memory var
		
			.. prompt messages
			
			switch($config::current_os) {
				ubuntu:
					...
					break;
				osx:
					...
					break;
			}
			
			.. return array of output
			
			
		}
	}
		



When the user runs a command, it will attempt to see if the command exists in the registered commands

	// Loaded modules array contains all the known functions (directives allowed)

	// If command found then execute
	if (in_array (user directive))
	{
	
		BURDShell_module_svn::{directive}();
//		BURDShell_module_svn::svn_create();
	}

Next release thoughts
======================

Setup Unit tests
	https://phpunit.de/getting-started.html

Add svn branch support commands

		svn create branch [branch_code_name] // Create a branch

		svn list branches	// Show a list of branches
		
		svn help [branch_code_name] //Spits out svn commands to help export and checkout

		svn delete branch [branch_code_name] // Deletes a branch 

Add comment svn tag commands

	'svn tag [revision number]'
	'svn list tags'
	
			svnlook tree --full-paths /home/path/to/svn/project | egrep -a '/?tags/.+' | sed -re 's!.*/?tags/([^/]*).*!\1!' | sort -u
			svnlook tree --full-paths /home/sysadmin/burdserver.dev/svn/burdserver.dev | egrep -a '/?tags/.+' | sort -u

svn copy svn://".Config::$shell_host_domain.Config::$shell_folder."/svn/".$user_input."/trunk svn://".Config::$shell_host_domain.Config::$shell_folder."/svn/".$user_input."/tags/1.0 --username ".Config::$shell_user


svn copy svn://"project/trunk \
    	  http://svn.example.com/project/tags/1.0 -m "Release 1.0"



	svn copy http://svn.example.com/project/trunk \
    	  http://svn.example.com/project/tags/1.0 -m "Release 1.0"
    	  
    Further info
	    http://stackoverflow.com/questions/851377/how-to-properly-create-a-svn-tag-from-trunk

Add further documentation
Tidy up documentation
Add wordpress app installation support
All in one 'site create' command (Host details is added into /etc/hosts, db created and web server virtual host setup)
'svn user' command (To add and delete svn users)
Add assistance text to explain to 'change config' if user or folder does not exist
Add installation assistence text to explain whch missing basic packages still need to be installed (e.g. svn, php5, apache2) 
Improve 'package identification' currently phpMyAdmin is identified by only a LICENSE.txt file
Modulalize commands e.g. 'svn' to be loadable 
	- Each module will have it's own error handling checking rather than per "Operating system" module (Reducing the amount of error handling)


Use PHP Module Readline
=======================
Still pondering 'http://uk1.php.net/readline' for a better solution.



Coloring shell
==============
http://blog.lenss.nl/2012/05/adding-colors-to-php-cli-script-output/


Black 0;30
Blue 0;34
Green 0;32
Cyan 0;36
Red 0;31
Purple 0;35
Brown 0;33
Light Gray 0;37 
Dark Gray 1;30
Light Blue 1;34
Light Green 1;32
Light Cyan 1;36
Light Red 1;31
Light Purple 1;35
Yellow 1;33
White 1;37

    echo "\033[31m some colored text \033[0m some white text \n";
    echo "\033[32m some colored text \033[0m some white text \n";

Security
=========
// NOTE: Below security thoughts are not redundant until otherwise required.

[For now - there is a config switch]

Investigate this library to assist with hiding password
	http://phpseclib.sourceforge.net/

		http://stackoverflow.com/questions/5652986/php-sudo-in-shell-exec
	
			<?php
			include('Net/SSH2.php');
			
			$ssh = new Net_SSH2('www.domain.tld');
			$ssh->login('username', 'password');
			
			$ssh->read('[prompt]');
			$ssh->write("sudo command\n");
			$ssh->read('Password:');
			$ssh->write("Password\n");
			echo $ssh->read('[prompt]');
			?>


Use sudo -n to prevent commands being run.

OR 

maybe die the shell if 'root' password not set

OR 

Request user to sudo bash once via a wrapper?

OR 
Try and impliment this

function get_password($prompt)
{
   $ostty = `stty -g`;
   system(
           "stty -echo -icanon min 1 time 0 2>/dev/null || " .
           "stty -echo cbreak"
           );

   echo "$prompt: ";

   // Get rid of newline when reading stdin
   $r = substr(fgets(STDIN), 0, -1);

   echo "\n";
   system ("stty $ostty");

   return $r;
}

$p = get_password("Password");
echo "Pasword entered: $p\n";



OR
	//!!!! THIS EXAMPLE CURRENTLY DOES NOT WORK !!!!!!!!  But something along the lines with changing colora via TTY protocol
	public function webserver_status() 
	{
	    exec("stty -echo -icanon min 1 time 0 2>/dev/null || " .
           "stty -echo cbreak"  . 
           " && sudo service apache2 status", $out_lines);	    
		$this->print_output($out_lines);	 		
	}


Update commands
===============

"site create"
--------------
No interaction creation.

Add a config option BOOLEAN option for 'auto_site_create' and set when TRUE
		This means create site 
		Also echo into /etc/hosts in advance  : As the command is 'sudo bashed'   :::: Make sure user has set root password
		Also create the database
		
		
		

		

New Commands
============

Modulaize commands so that can be switched on and off.

App
---
Add support to fetch apps

	e.g. app get phpMyAdmin		// In theory this should get the latest phpMyAdmin

Add support for 'wordpress' app install

		// Requires 'database_exists' function

Debug
-----
Add 'debug log errors' : This will run "tail -10" on error log
	 
Add cron feature
----------------
	To switch on backups
	
		.e.g cron add backup
		
				How often (Monthly, daily, weekly)?
				

Attach on Ubuntu to forward backups to outside
	//This will only with 'bridged' Warn the user about this.


svn
---
list branches
	svn ls svn://burdserver.dev/home/sysadmin/burdserver.dev/svn/burdserver.dev/ --verbose

list tags
	svn ls svn://burdserver.dev/home/sysadmin/burdserver.dev/svn/burdserver.dev/tags --verbose


tagging a release

svn tag 1.0b

	svn copy http://svn.example.com/project/trunk \
    	  http://svn.example.com/project/tags/1.0 -m "Release 1.0"

	 svn copy svn://burdserver.dev/home/sysadmin/burdserver.dev/svn/burdserver.dev/trunk \
	          svn://burdserver.dev/home/sysadmin/burdserver.dev/svn/burdserver.dev/tags/1.0b -m "Release 1.0b" --username sysadmin


'svn user paulb'    This will list access allowed for user
	svn user [username]

'svn user delete paulb'  //This will delete the user and any security
	svn user delete [username]

'svn user add paulb'  //This will add the user 		

	svn user add [username]

'svn grants' list known permissions (cat authz)

'svn grant paulb /path/to/folder rw'   // This will add permission to read/write to a folder for user 'paulb'



'svn grant paulb /path/to/folder rw'   // This will delete permission to read/write to a folder for user 'paulb'

webserver
----------

Add apache2 commands

	a2enmod
	a2dismod
	apachectl -t -D DUMP_MODULES	: Lists known modules
			  -t -D DUMP_VHOSTS		: List known virtual hosts
		 


Shell
=====

Command history
---------------
Add PHP Readline support

	http://uk1.php.net/readline
	
	Hopefully make rlwrap a redundant step [possibly

Documentation thoughts
----------------------

http://www.mediawiki.org/wiki/Extension:DumpHTML

Create SVN commands to tag version.

Create phpmyadmin commands to install or update phpmyadmin

Create commands to duplciate project into 'stage' and 'testing'.

Split database backup into 'data' and 'structure'.

Create friendly documentation
	BURDShell environment installation
		Native Mac 10.9
		Native Ubuntu 12.04 LTS		
		Virtual machine
		As [username]

	BURDShell installation		
		Quick installation
		Long detailed installation
		
	BURDShell
		Quick start guides
			Start shell.php in a project environment
			Create a site
			Setting up SVN
			Commit changes
			Switching network from private to public
			Making a backup
			
		Site
			About sites (aka projects)
			Creating a site
			Deleteing a site
			Switching site environments
			
		Version control
			About version control
			Creating a version control
			Deleting a version control

		Database
			Create a database
			Delete a database

		Backups
			Configure backup folder
			Database
			SVN
			
		Networking
			Switching from public to private networks
			Switching from public to private virtual machines
			
		Command index
			[A to Z], description parameters and example use
		
	Look into running burdserver on apple Mac
	
Networking
==========
Add dns server
	bare in mind
		Wild card in dev entry in /etc/host file
			e.g. 
					.dev or *.dev (maybe)

	If not a desktop
		Running laptop on network, I would want use DNS to connect to the SHELL.


Collabrative working mode
=========================
	Create a development 'group' privledge
			NOT super user
			
	Dashboard area 
		for listing all projects avaiable 
		Port details and addresses

Backup
======
Add Help text to supply Rsync to backup servers
	E.g. "backup help"			

Sudo bash : Hide th password or detect if allowed
=================================================


	Detect code
			up vote
			2
			down vote
			accepted
			First, ask yourself what exactly defines a login "having root privileges". AFAICT there are 2 basic solutions.
			
			The old-school way, where sysadmins create multiple accounts with uid 0, which I - and I'm certainly not alone in this - consider to be a nightmare. In this scenario you could check all users in your list using posix_getpwnam and see if their uid matches 0.
			
			The following code snippet does just that, $privileged will contain the users with root privileges :
			
			$logins = array('root', 'john', 'guest', 'foo');
			$privileged = array();
			foreach($logins as $login) {
			    $userInfo = posix_getpwnam($login);
			    if ($userInfo !== FALSE) {
			        if ($userInfo['uid'] == 0) {
			          $privileged[] = $login;
			        }
			    }
			}
			The other (and imho only sane) way to do this is to add all users with root/administrative privileges to a specific group (wheel or admin are already used in different Linux distributions, find out which one works for you). This scenario is even simpler, since you can use posix_getgrnam to fetch all members in a specific group.
			
			The following code snippet will match an array of logins you provide, and see who's a member with specific privileges, again $privileged will contain the result (ie. the users in your list that are a member of the group you specified) :
			
			$logins = array('root', 'john', 'guest', 'foo');
			$privileged = array();
			$groupInfo = posix_getgrnam('admins');
			if ($groupInfo !== FALSE) {
			    $privileged = array_intersect($logins, $groupInfo['members']);
			}
			


	Hide password when typing 'password' for sudo
		//Color????
	Hide password when prompted for password for database administration
		//Color????
	
